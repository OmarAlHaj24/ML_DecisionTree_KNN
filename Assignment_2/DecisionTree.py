# -*- coding: utf-8 -*-
"""ML_2_DecisionTree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lKWI387keIFajK_lbyOZCTWiH7C04mbO

### **Imports**
"""

import random
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.utils import shuffle
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import normalize
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

"""### **Data Preparation**"""

df = pd.read_csv("BankNote_Authentication.csv")
x = df[df.columns[0:4]]
y = df[df.columns[4:5]]
x.head()

"""### **Normalization**"""

normalized_X = (x - x.min()) / (x.max() - x.min())
normalized_X.head()

"""### **Splitting**"""

def Split(randSeed, testSz):
  X_train, X_test, Y_train, Y_test = train_test_split(normalized_X, y, random_state = randSeed, test_size = testSz)
  return X_train, X_test, Y_train, Y_test

"""### **Model**"""

def Test(randSeed, testSz):
  clf = DecisionTreeClassifier()
  X_train, X_test, Y_train, Y_test = Split(randSeed, testSz)
  clf.fit(X_train,Y_train)
  y_pred = clf.predict(X_test)
  return clf.tree_.node_count, accuracy_score(y_true = Y_train, y_pred=clf.predict(X_train)), accuracy_score(y_true = Y_test, y_pred=y_pred)

"""### **Testing: 1**"""

file = open("decision_tree_report1.txt", "w")
exp1 = pd.DataFrame(columns=['Size','Train Accuracy', 'TestAccuracy'])
for exp in range(0, 5):
  node_count, training_accuracy, test_accuracy = Test(None, 0.75)
  exp1 = exp1.append({'Size':node_count, 'Train Accuracy':training_accuracy, 'TestAccuracy':test_accuracy}, ignore_index=True)
  print("Experiment: " + str(exp + 1) + "\nMax node count of tree: " + str(node_count) + "\nTraining data accuracy: " + 
        str(training_accuracy) + "\nTest data accuracy: " + str(test_accuracy)+"\n")
  file.write("Experiment: " + str(exp + 1) + "\nMax node count of tree: " + str(node_count) + "\nTraining data accuracy: " + 
        str(training_accuracy) + "\nTest data accuracy: " + str(test_accuracy)+"\n\n")
exp1.to_excel("decision_tree_report1.xlsx", index=False)

"""### **Testing: 2**"""

outFile = open("decision_tree_report2.txt", "w")

exp2 = pd.DataFrame(columns=['Training Data Size', 'Min Size', 'Max Size', 'Avg Size', 'Min Train Accuracy', 'Max Train Accuracy', 
                             'Avg Train Accuracy', 'Min Test Accuracy', 'Max Test Accuracy', 'Avg Test Accuracy'])

meanAcc = []
trainSz = []
numNodes = []
seeds =[1, 10, 42, 60, 5]
for sz in range(3, 8):
  training_ratio = sz / 10
  test_ratio = 1 - training_ratio;

  treeSz = []
  trainAcc = []
  testAcc = []

  #for exp in range(0, 5):
  for seed in seeds:
    #seed = random.randint(0, 100)
    node_count, training_accuracy, test_accuracy = Test(seed, test_ratio)
    
    treeSz.append(node_count)
    trainAcc.append(training_accuracy)
    testAcc.append(test_accuracy)

  print("Training ratio: " + str(training_ratio * 100) + "%")
  print("Minimum of training accuracy: " + str(min(trainAcc)) + "\nMaximum of training accuracy: " + str(max(trainAcc)) +
        "\nMean of training accuracy: " + str(sum(trainAcc) / len(trainAcc)))
  
  print("Minimum of testing accuracy: " + str(min(testAcc)) + "\nMaximum of testing accuracy: " + str(max(testAcc)) +
        "\nMean of testing accuracy: " + str(sum(testAcc) / len(testAcc)))
  
  print("Minimum of tree size: " + str(min(treeSz)) + "\nMaximum of tree size: " + str(max(treeSz)) +
        "\nMean of tree size: " + str(sum(treeSz) / len(treeSz)))
  
  print("=========================================================")

  meanAcc.append(sum(testAcc) / len(testAcc))
  trainSz.append(training_ratio * 100)
  numNodes.append(sum(treeSz) / len(treeSz))

  outFile.write("Training ratio: " + str(training_ratio * 100) + "%\n")
  outFile.write("Minimum of training accuracy: " + str(min(trainAcc)) + "\nMaximum of training accuracy: " + str(max(trainAcc)) +
        "\nMean of training accuracy: " + str(sum(trainAcc) / len(trainAcc)) + "\n")
  outFile.write("Minimum of testing accuracy: " + str(min(testAcc)) + "\nMaximum of testing accuracy: " + str(max(testAcc)) +
        "\nMean of testing accuracy: " + str(sum(testAcc) / len(testAcc)) + "\n")
  outFile.write("Minimum of tree size: " + str(min(treeSz)) + "\nMaximum of tree size: " + str(max(treeSz)) +
        "\nMean of tree size: " + str(sum(treeSz) / len(treeSz)) + "\n")
  outFile.write("========================================================\n")

  data ={'Training Data Size':training_ratio * 100, 'Min Size':min(treeSz), 'Max Size':max(treeSz), 
         'Avg Size':sum(treeSz) / len(treeSz), 'Min Train Accuracy':min(trainAcc), 'Max Train Accuracy':max(trainAcc), 
         'Avg Train Accuracy':sum(trainAcc) / len(trainAcc), 'Min Test Accuracy':min(testAcc), 
         'Max Test Accuracy':max(testAcc), 'Avg Test Accuracy':sum(testAcc) / len(testAcc)}
  exp2 = exp2.append(data, ignore_index=True)
  
#######################################################################################################################################
exp2.to_excel("decision_tree_report2.xlsx", index=False)

fig = plt.figure(figsize=(10,10))
 
# define subplots and their positions in figure
plt1 = fig.add_subplot(221)
plt2 = fig.add_subplot(222)

plt1.plot(trainSz, meanAcc)
plt1.set_title("Training size against Accuracy")
plt2.plot(trainSz, numNodes)
plt2.set_title("Training size against Tree Node Count")

plt.show()

