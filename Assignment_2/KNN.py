# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vHmj_p1h4HF2KfGjWBdgMkKO6_ZqALOf
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split

"""## Read and Split"""

df = pd.read_csv("BankNote_Authentication.csv")
df.head()

X = df[df.columns[:-1]]
y = df['class']
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state = 1)

"""# Normalize Data"""

avg_train = X_train.mean()
std_train = X_train.std()
normalized_X = (X_train - avg_train)/std_train
normalized_X.head()

"""# Model"""

def euclidean_distance (X_train, input_data):
  diff = (X_train - input_data)**2
  distance = diff.sum(axis=1)
  return np.sqrt(distance)

def knn (X_train, y_train, k, input_data):
  distance = euclidean_distance (X_train, input_data)
  nn = (distance.sort_values())[:k]
  classes = y_train.unique()
  count = np.zeros(classes.shape)
  for i in nn.index:
    temp_class = y_train[i]
    index = np.where(classes == temp_class)[0][0]
    count[index]+=1
  classes = [x for _,x in sorted(zip(count,classes))][::-1] 
  count = np.sort(count)[::-1]   
  first_class = classes[0]
  min_index = len(y_train)+1
  for i in range(len(classes)):
    if (count[i]< count[0]):
      break
    index = np.where(y_train == classes[i])[0][0]
    if (index < min_index):
      min_index = index
      first_class = classes[i]
  return first_class

def accuracy(results, y_test):
  acc = (results == y_test).astype(int)
  return (acc.sum()/acc.shape[0])

"""## Experiment"""

X_test = (X_test - avg_train)/std_train

acc = np.zeros((9,))
for i in range (1,10):
  results = np.empty(y_test.shape)
  print("k value: ",i)
  for ind in range (X_test.shape[0]) :
    results[ind] = knn(normalized_X, y_train, i, X_test.iloc[ind])    
  acc[i-1] = accuracy(results, y_test)
  print("number of correctly classified instances: ",acc[i-1]*results.shape[0])
  print("Total number of instances: ",y_test.shape[0])
  print("Accuracy: ",acc[i-1])
  print(" ")

